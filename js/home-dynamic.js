// üé® SISTEMA DIN√ÅMICO PARA P√ÅGINA PRINCIPAL CON CLOUDFLARE R2 üé®
// Sistema que reemplaza im√°genes del showcase con contenido aleatorio de Cloudflare

console.log('‚úÖ home-dynamic.js cargado correctamente');

// üåü CONFIGURACI√ìN CLOUDFLARE R2
const CLOUDFLARE_CONFIG = {
  baseUrl: 'https://pub-acb752a1176b4e8d82e52d357e330c9f.r2.dev',
  inventoryFile: '/cloudflare-fruits-inventory.json'
};

// üéØ VARIABLES GLOBALES
let cloudflareImages = [];
let selectedImages = [];

// üîÑ FUNCI√ìN PRINCIPAL DE INICIALIZACI√ìN
async function initializeCloudflareShowcase() {
  try {
    console.log('üì¶ Cargando inventario de Cloudflare R2...');
    console.log('üìç Ruta del archivo:', CLOUDFLARE_CONFIG.inventoryFile);
    
    // Cargar inventario
    const response = await fetch(CLOUDFLARE_CONFIG.inventoryFile);
    console.log('üì° Response status:', response.status);
    console.log('üì° Response ok:', response.ok);
    
    if (!response.ok) {
      throw new Error(`Error HTTP: ${response.status}`);
    }
    
    const inventory = await response.json();
    console.log('üìä Inventario cargado:', inventory);
    
    // Combinar todas las im√°genes disponibles
    const kopfeImages = inventory.baskets.kopfe.fruits || [];
    const wesenImages = inventory.baskets.wesen.fruits || [];
    cloudflareImages = [...kopfeImages, ...wesenImages];
    
    console.log(`üñºÔ∏è Total de im√°genes disponibles: ${cloudflareImages.length}`);
    console.log('- K√∂pfe (retratos):', kopfeImages.length);
    console.log('- Wesen (seres):', wesenImages.length);
    
    if (cloudflareImages.length === 0) {
      console.warn('‚ö†Ô∏è No se encontraron im√°genes en el inventario');
      return;
    }
    
    // Seleccionar 18 im√°genes aleatorias (6 para cada versi√≥n: desktop, tablet, mobile)
    selectedImages = selectRandomImages(cloudflareImages, 18);
    console.log('üé≤ Im√°genes seleccionadas:', selectedImages.map(img => img.name));
    
    // Reemplazar im√°genes en el DOM
    await replaceShowcaseImages();
    
    // Configurar navegaci√≥n
    setupImageNavigation();
    
    console.log('‚úÖ Sistema de showcase con Cloudflare R2 inicializado correctamente');
    
  } catch (error) {
    console.error('‚ùå Error al inicializar el showcase de Cloudflare:', error);
    console.log('üîÑ Manteniendo im√°genes locales como fallback');
  }
}

// üé≤ FUNCI√ìN PARA SELECCIONAR IM√ÅGENES ALEATORIAS
function selectRandomImages(images, count) {
  const shuffled = [...images].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

// üñºÔ∏è FUNCI√ìN PARA REEMPLAZAR IM√ÅGENES EN EL DOM
async function replaceShowcaseImages() {
  console.log('üîÑ Reemplazando im√°genes del showcase...');
  console.log('üìä Im√°genes seleccionadas disponibles:', selectedImages.length);
  
  // Verificar que tenemos im√°genes seleccionadas
  if (selectedImages.length === 0) {
    console.error('‚ùå No hay im√°genes seleccionadas para reemplazar');
    return;
  }
  
  // Mapear las clases de las im√°genes del showcase
  const showcaseSelectors = [
    // Desktop (6 im√°genes)
    '.img__showcase_1',
    '.img__showcase_2', 
    '.img__showcase_3',
    '.img__showcase_4',
    '.img__showcase_5',
    '.img__showcase_6',
    // Tablet (6 im√°genes)
    '.img__showcase_1_t',
    '.img__showcase_2_t',
    '.img__showcase_3_t', 
    '.img__showcase_4_t',
    '.img__showcase_5_t',
    '.img__showcase_6_t',
    // Mobile (6 im√°genes)
    '.img__showcase_1_m',
    '.img__showcase_2_m',
    '.img__showcase_3_m',
    '.img__showcase_4_m',
    '.img__showcase_5_m',
    '.img__showcase_6_m'
  ];
  
  console.log(`üîç Elementos a reemplazar: ${showcaseSelectors.length}`);
  
  // Reemplazar cada imagen
  for (let i = 0; i < showcaseSelectors.length; i++) {
    const selector = showcaseSelectors[i];
    const imageElement = document.querySelector(selector);
    
    console.log(`üîç Buscando selector: ${selector}, encontrado:`, !!imageElement);
    
    if (!imageElement) {
      console.warn(`‚ö†Ô∏è Elemento no encontrado: ${selector}`);
      continue;
    }
    
    if (selectedImages.length === 0) {
      console.warn(`‚ö†Ô∏è No hay im√°genes seleccionadas disponibles`);
      continue;
    }
    
    // Calcular qu√© imagen usar (ciclar entre las im√°genes seleccionadas)
    const imageIndex = i % selectedImages.length;
    const cloudflareImage = selectedImages[imageIndex];
    
    console.log(`üñºÔ∏è Preparando imagen ${i}: ${selector} -> ${cloudflareImage.name}`);
    
    // Precargar la imagen
    const img = new Image();
    img.onload = () => {
      // Reemplazar src y srcset
      imageElement.src = cloudflareImage.url;
      imageElement.srcset = cloudflareImage.url;
      
      // Actualizar alt text
      imageElement.alt = `Obra de arte digital: ${cloudflareImage.name}`;
      
      // Agregar atributos de datos para navegaci√≥n
      imageElement.dataset.cloudflareImage = 'true';
      imageElement.dataset.imageUrl = cloudflareImage.url;
      imageElement.dataset.imageName = cloudflareImage.name;
      imageElement.dataset.imageType = cloudflareImage.classification;
      
      // A√±adir efecto de fade-in
      imageElement.style.opacity = '0';
      imageElement.style.transition = 'opacity 0.5s ease-in-out';
      setTimeout(() => {
        imageElement.style.opacity = '1';
      }, 100);
      
      console.log(`‚úÖ Imagen reemplazada: ${selector} -> ${cloudflareImage.name}`);
      console.log(`   üîó URL: ${cloudflareImage.url}`);
      console.log(`   üìê Elemento visible: ${imageElement.offsetWidth}x${imageElement.offsetHeight}`);
    };
    
    img.onerror = (error) => {
      console.error(`‚ùå Error al cargar imagen: ${cloudflareImage.url}`, error);
    };
    
    img.src = cloudflareImage.url;
  }
}

// üß≠ FUNCI√ìN PARA CONFIGURAR NAVEGACI√ìN DE IM√ÅGENES
function setupImageNavigation() {
  console.log('üß≠ Configurando navegaci√≥n de im√°genes...');
  
  // Seleccionar todas las im√°genes del showcase
  const showcaseImages = document.querySelectorAll('[class*="img__showcase"]');
  
  console.log(`üéØ Configurando navegaci√≥n para ${showcaseImages.length} im√°genes`);
  
  showcaseImages.forEach((img, index) => {
    // Remover event listeners existentes
    const newImg = img.cloneNode(true);
    img.parentNode.replaceChild(newImg, img);
    
    // Agregar nuevo event listener
    newImg.addEventListener('click', (e) => {
      e.preventDefault();
      
      const imageType = newImg.dataset.imageType;
      const imageName = newImg.dataset.imageName;
      
      console.log(`üéØ Click en imagen: ${imageName} (${imageType})`);
      
      // Navegar a la galer√≠a correspondiente
      if (imageType === 'kopfe') {
        window.location.href = 'de/gallery-kopfe.html';
      } else if (imageType === 'wesen') {
        window.location.href = 'de/gallery-wesen.html';
      } else {
        // Fallback a galer√≠a general
        window.location.href = 'de/gallery-wesen.html';
      }
    });
    
    // Agregar efectos hover mejorados
    newImg.addEventListener('mouseenter', () => {
      newImg.style.transform = 'scale(1.05)';
      newImg.style.transition = 'transform 0.3s ease';
      newImg.style.zIndex = '10';
    });
    
    newImg.addEventListener('mouseleave', () => {
      newImg.style.transform = 'scale(1)';
      newImg.style.zIndex = '1';
    });
  });
}

// üöÄ FUNCI√ìN DE DEBUG PARA VERIFICAR EL ESTADO
function debugShowcaseState() {
  console.log('üîç ESTADO DEL SHOWCASE:');
  console.log('- Im√°genes de Cloudflare cargadas:', cloudflareImages.length);
  console.log('- Im√°genes seleccionadas:', selectedImages.length);
  console.log('- Elementos del showcase encontrados:', document.querySelectorAll('[class*="img__showcase"]').length);
  
  // Mostrar informaci√≥n de cada imagen
  document.querySelectorAll('[class*="img__showcase"]').forEach((img, index) => {
    const isCloudflare = img.dataset.cloudflareImage === 'true';
    console.log(`  ${index + 1}. ${img.className}: ${isCloudflare ? '‚úÖ Cloudflare' : '‚ùå Local'} - ${img.src}`);
  });
}

// üé¨ INICIALIZACI√ìN AUTOM√ÅTICA
// Ejecutar cuando el DOM est√© listo
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeCloudflareShowcase);
} else {
  // El DOM ya est√° listo
  initializeCloudflareShowcase();
}

// Tambi√©n ejecutar cuando la p√°gina est√© completamente cargada
window.addEventListener('load', () => {
  console.log('üåê P√°gina completamente cargada, verificando estado del showcase...');
  setTimeout(debugShowcaseState, 1000);
});

// Funci√≥n global para debug (disponible en la consola)
window.debugShowcase = debugShowcaseState;
window.reloadShowcase = initializeCloudflareShowcase; 